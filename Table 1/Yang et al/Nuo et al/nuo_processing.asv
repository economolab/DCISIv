%%

path = 'D:\FDR Predictions DATA\Yang et al\';
load(strcat(path, 'Data_CompileData1_YangEtAl22.mat'))

%% Concatenate across trial types, make all trials same length

N = length(neuron_spike_times);
all_trials = cell(N,1);

for i=1:N

    unit_trials = neuron_spike_times(i,:);
    num_trial_types = length(unit_trials);

    for j=num_trial_types:-1:1
        if ~iscell(unit_trials{j})
            unit_trials(j) = [];
        end
    end

    all_trials{i} = vertcat(unit_trials{:});

end

for i=1:N
    num_trials = length(all_trials{i});
    for j=1:num_trials
        current_trial = all_trials{i}{j};
        current_trial = current_trial((current_trial > -2.6) & (current_trial < 1.3));
        current_trial = current_trial + 2.6;
        all_trials{i}{j} = current_trial;
    end
end

%% convert to PSTHs

num_bins = 78;
T = 3.9;
PSTHs = zeros(N, num_bins);

for i=1:N
    num_trials = length(all_trials{i});
    spikes = {};
    for j=1:num_trials
        current_trial = all_trials{i}{j};
        if ~isempty(current_trial)
            spikes = [spikes, current_trial]; %#ok
        end 
    end
    spikes = vertcat(spikes{:});
    PSTHs(i,1:num_bins) = genPSTH(spikes, num_trials, T, num_bins);
end


%% Calculate ISI violation fractions

tau = 0.0025;
ISI_viol = zeros(N,1);

for i=1:N

    num_spikes = 0;
    num_viols= 0;
    num_trials = length(all_trials{i});

    for j=1:num_trials
        current_trial = all_trials{i}{j};
        num_spikes = num_spikes + length(current_trial);
        num_viols = num_viols + sum(diff(current_trial) < tau);
    end

    ISI_viol(i) = num_viols/num_spikes;
end

%% Calculate maximum and minimum observed trial times

max_time = 0;
min_time = 0;

for i=1:N
    num_trials = length(all_trials{i});
    for j=1:num_trials
        current_trial = all_trials{i}{j};
        for k=1:length(current_trial)
            if current_trial(k) > max_time
                max_time = current_trial(k);
            end
            if current_trial(k) < min_time
                min_time = current_trial(k);
            end
        end
    end
end


%% recording time and number of spikes

rec_time = zeros(length(all_trials), 1);

for i = 1:length(all_trials)
    rec_time(i) = length(all_trials{i})*3.9;
end

nans = [11,   26,   30,   35,   52,   56,   59,   75,   78,   79,   88, ...
        109,  114,  117,  122,  150,  153,  165,  172,  192,  201,  207, ...
        226,  234,  236,  237,  238,  261,  264,  277,  287,  291,  295,...
        308,  324,  332,  377,  385,  416,  425,  426,  430,  433,  447,...
        466,  487,  488,  489,  497,  529,  533,  536,  544,  552,  555,...
        564,  577,  593,  622,  668,  685,  725,  757,  795,  804,  805,...
        810,  811,  813,  814,  820,  831,  854,  890,  901,  911,  914,...
        933,  951,  964,  973,  997, 1000, 1004, 1007, 1021, 1063, 1071,...
       1084, 1086, 1094, 1099, 1107, 1129, 1136, 1162, 1163, 1215, 1251,...
       1262, 1271, 1283, 1289, 1292, 1299, 1306, 1312, 1317, 1323, 1330,...
       1334, 1340, 1341, 1352, 1373, 1389, 1415, 1418, 1421, 1423, 1450,...
       1458, 1485, 1499, 1512, 1522, 1537, 1539, 1559, 1561, 1578, 1612,...
       1632, 1649, 1660, 1679, 1681, 1704, 1708, 1709, 1717, 1727, 1752,...
       1760, 1798, 1800, 1892, 1904, 1913, 1968, 1993, 2027, 2028, 2053,...
       2064, 2081, 2095, 2096, 2113, 2126, 2144, 2152, 2154, 2168, 2204,...
       2205, 2219, 2254, 2270, 2279, 2281, 2319, 2337, 2354, 2376, 2378,...
       2401, 2416, 2433, 2444, 2453, 2454, 2457, 2493, 2528, 2547, 2550,...
       2628, 2629, 2650, 2659, 2663, 2672, 2677, 2682, 2683, 2687, 2743,...
       2744, 2758, 2771, 2782, 2786, 2818, 2824, 2830, 2841, 2846, 2849,...
       2868, 2869, 2873, 2893, 2895, 2920, 2992, 2993, 3006, 3057, 3065,...
       3069, 3071, 3092, 3098, 3101, 3106, 3156, 3159, 3160, 3162, 3164,...
       3185, 3191, 3195, 3198, 3212, 3213, 3253, 3257, 3259, 3275, 3276,...
       3284, 3294, 3338, 3339, 3343, 3360, 3466, 3476, 3478, 3480, 3491,...
       3493, 3496, 3507, 3516, 3523, 3528, 3538, 3591, 3611, 3656, 3663,...
       3671, 3688, 3691, 3699, 3721, 3742, 3775, 3794, 3827, 3835, 3853,...
       3854, 3859, 3876, 3888, 3915, 3973, 3975, 3982, 3992, 4003, 4067,...
       4085, 4105, 4130, 4146, 4159, 4180, 4188, 4192, 4197, 4202, 4214,...
       4265, 4292, 4308, 4310, 4328, 4334, 4355, 4359, 4364, 4368, 4411,...
       4439, 4443, 4445, 4465, 4482, 4504, 4525, 4531, 4554, 4563, 4581,...
       4635, 4636, 4654, 4663, 4696, 4703, 4712, 4725, 4728, 4739, 4760,...
       4775, 4805, 4813, 4826, 4829, 4837, 4858, 4863, 4869, 4904, 4905,...
       4916, 4918, 4919, 4920, 4923, 4926, 4927, 4929, 4931, 4937, 4947,...
       5020, 5022, 5036, 5055, 5078, 5096, 5097, 5106, 5121, 5129, 5141,...
       5145, 5154, 5164, 5169, 5172, 5185, 5186, 5190, 5198, 5214, 5230,...
       5239, 5240, 5245, 5249, 5253, 5264, 5277, 5279, 5296, 5310, 5313,...
       5377, 5382, 5387, 5403, 5431, 5434, 5435, 5440, 5441, 5444, 5448,...
       5482, 5483, 5484, 5485, 5498, 5508, 5509, 5521, 5524, 5526, 5528,...
       5551, 5553, 5559, 5582, 5589, 5606, 5609, 5610, 5618, 5634, 5635,...
       5642, 5645, 5650, 5654, 5656, 5663, 5674, 5687, 5702, 5704, 5716,...
       5729, 5734, 5770, 5776, 5780, 5782, 5783, 5802, 5805, 5810, 5812,...
       5833, 5871, 5872, 5881, 5884, 5890, 5900, 5939, 5940, 5944, 5947,...
       5949, 5961, 5983, 5986, 5995, 6001, 6005, 6014, 6018, 6024, 6025,...
       6045, 6052, 6078, 6081, 6083, 6110, 6120, 6122, 6131, 6145, 6153,...
       6167, 6193, 6200, 6213, 6217, 6245, 6256, 6265, 6281, 6286, 6293,...
       6322, 6324, 6356, 6373, 6390, 6396, 6421, 6450, 6451, 6452, 6453,...
       6469, 6475, 6479, 6481, 6483, 6488, 6506, 6525, 6539, 6547, 6551,...
       6552, 6565, 6567, 6568, 6572, 6586, 6593, 6598, 6607, 6610, 6613,...
       6633, 6641, 6645, 6646, 6653, 6665, 6666, 6670, 6671, 6672, 6673,...
       6674, 6675, 6677, 6691, 6692, 6698, 6699, 6700, 6703, 6708, 6715,...
       6716, 6718, 6728, 6739, 6741, 6746, 6749, 6751, 6752, 6757, 6764,...
       6777, 6782, 6793, 6803, 6809, 6810, 6814, 6831, 6857, 6876, 6886,...
       6888, 6901, 6954, 6956, 6967, 6969, 6971, 6974, 6990, 7014, 7042,...
       7050, 7051, 7054, 7070, 7090, 7094, 7096, 7139, 7149, 7158, 7182,...
       7183, 7196, 7198, 7226, 7233, 7235, 7236, 7239, 7242, 7256, 7259,...
       7269, 7279, 7284, 7286, 7288, 7289, 7299, 7314, 7340, 7347, 7354,...
       7367, 7369, 7378, 7383, 7402, 7404, 7412, 7422, 7465, 7475, 7524,...
       7533, 7535, 7544, 7554, 7557, 7627, 7635, 7673, 7675, 7686, 7693,...
       7696, 7702, 7707, 7716, 7732, 7733, 7735, 7744, 7748, 7771, 7775,...
       7796, 7800, 7802, 7810, 7819, 7832, 7834, 7843, 7865, 7869, 7870,...
       7889, 7906, 7907, 7911, 7915, 7931, 7946, 7980, 7988, 7990, 7991,...
       8024, 8031, 8035, 8043, 8052, 8074, 8095, 8098, 8100, 8101, 8127,...
       8139, 8140, 8141, 8169, 8171, 8204, 8215, 8218, 8223, 8227, 8276,...
       8300, 8317, 8320, 8327, 8329, 8332, 8377, 8378, 8380, 8503, 8506,...
       8579, 8585, 8605, 8625, 8631, 8654, 8718, 8726, 8736, 8738, 8769,...
       8774, 8775, 8780, 8821, 8827, 8839, 8846, 8851, 8861, 8876, 8907,...
       8914, 8935, 8961, 8968, 8970, 8983, 8991, 9029, 9040, 9070, 9086,...
       9115, 9180, 9190, 9243, 9248, 9276, 9287, 9299, 9301, 9342, 9347,...
       9349, 9374, 9375, 9387, 9403, 9405, 9435, 9452, 9463, 9467, 9474,...
       9477, 9513, 9572];

rec_time_nan = zeros(length(nans), 1);
for i = 1:length(nans)
    rec_time_nan(i) = length(all_trials{i})*3.9;
end

num_spikes = zeros(length(all_trials), 1);
for i = 1:length(all_trials)
    spikes = 0;
    for j = 1:length(all_trials{i})
        spikes = spikes + length(all_trials{i}{j});
    end
    num_spikes(i) = spikes;
end

num_spikes_nan = zeros(length(nans), 1);
for i = 1:length(nans)
    spikes = 0;
    for j = 1:length(all_trials{i})
        spikes = spikes + length(all_trials{i}{j});
    end
    num_spikes_nan(i) = spikes;
end

%% 

function bins = genPSTH(spikes, n, T, N)
    delta = T/N;
    bins = zeros(N,1);
    for i=1:N
        for j=1:length(spikes)
            if (spikes(j) >= (i-1)*delta) && (spikes(j) < (i)*delta)
                bins(i) = bins(i) + 1;
            end
        end
    end 

    bins = bins/(delta*n);
end



